/* eslint-disable */
import "bootstrap";
import "./styles.css";

/* 
 * All the word lists were generated by ChatGPT, as it's the only use that its acceptable to me: to ease database's tedious work
 * then I converted them to JSON format (I was getting weird results asking for JSON lists directly idk why)
 * I also wrote a Python script (included here if you wanna check) to sort JSON objects just to refresh my Python a little
*/

window.onload= function() {
  
  const 
    FILEPATH= "./src/data/%0.json",
    FILES= [
      { filename: "pronouns", parser: (j) => { AMOUNTS[0]= j.length; PRONOUNS.push(...j); } },
      { filename: "adjectives", parser: (j) => { AMOUNTS[1]= j.length; ADJECTIVES.push(...j); } },
      { filename: "nouns", parser: (j) => { for(const g of j) AMOUNTS[2]+= g.values.length; NOUNS.push(...j); } },
      { filename: "domains", parser: (j) => { AMOUNTS[3]+= j.length; DOMAINS.push(...j); } }
  ];

  const PRONOUNS= [], ADJECTIVES= [], NOUNS= [], DOMAINS= [];
  const 
    AMOUNTS=[0,0,0,0,0],
    AMOUNTS_ELEMENTS= document.getElementById("dng-amounts").children,
    AMOUNTS_CLASSES= ["text-danger-emphasis", "text-warning-emphasis", "text-success-emphasis"];

  const 
    FORM= document.getElementById("generator-form"),
    BUTTONS= Array.from(FORM.querySelectorAll("[action]")),
    BUTTONS_TYPES= ["noun-none", "noun-all", "noun-rand"],
    SLIDERS= Array.from(FORM.querySelectorAll("[type='range']")),
    SLIDERS_LOOPS={};

  const 
    RESULTS_CONTAINER= document.getElementById("dng-results-container"),
    RESULTS_TEMPLATE= document.getElementById("dng-result-template"),
    RESULTS_INFO= RESULTS_CONTAINER.children[0],
    RESULTS_ERROR= RESULTS_CONTAINER.children[1];

  var bFirstTime= true;

  async function initialize(){

    FORM.addEventListener("submit", (e) =>{ e.preventDefault(); doGeneration() } );

    for(let i=0; i < AMOUNTS_ELEMENTS.length; i++) AMOUNTS_ELEMENTS[i].classList= AMOUNTS_CLASSES[0];

    var json;
    for(const loader of FILES) {
      /* yayy double await is this bad ? xd */
      json= await (await fetch(FILEPATH.replace("%0", loader.filename))).json();
      loader.parser(json);
    }

    AMOUNTS[4]= AMOUNTS[0] * AMOUNTS[1] * AMOUNTS[2] * AMOUNTS[3];
    setTimeout(animateAmounts, 500);
    setTimeout(animateGroups, 250);

    for(const sli of SLIDERS) {
      onSliderChanged(sli);
      sli.addEventListener("mousedown", (e) =>{ SLIDERS_LOOPS[e.target.name]= setInterval(() => {onSliderChanged(e.target) } ) } );
      sli.addEventListener("mouseup", (e) =>{ clearInterval(SLIDERS_LOOPS[e.target.name]); onSliderChanged(e.target) } );
    }

    for(const btn of BUTTONS) btn.addEventListener("click", (e)=>{ onActionPerformed(e.target.getAttribute("action"))})
  }

  function doGeneration(){
    const 
      data= Array.from(FORM).filter(e=>e.tagName==="INPUT"),
      groups= data.filter(e=>e.name.startsWith("dng-noungrp") && e.checked),
      adjs= [], nouns= [], doms= [];

    const
      resultCount= data.find(e => e.name==="results").value,
      www= data.find(e => e.name==="usewww").checked,
      pronoun= data.find(e => e.name==="usepronouns").checked,
      domainRarity= 1.0 - data.find(e => e.name==="domrarity").value,
      adjVibe= data.find(e => e.name==="vibe").value,
      adjVariance= data.find(e => e.name==="viberange").value;
    
    const 
        adjmin= clamp(adjVibe - adjVariance, 0, 1),
        adjmax= clamp(adjVibe + adjVariance, 0, 1),
        dommin= clamp(domainRarity - .25, 0, 1),
        dommax= clamp(domainRarity + .25, 0, 1);

    const err= (!groups || groups.length == 0);

    RESULTS_ERROR.classList.toggle("hidden", !err);

    if(!err){
      
      RESULTS_CONTAINER.innerHTML="";

      adjs.push(...ADJECTIVES.filter(e => e.vibe >= adjmin && e.vibe <= adjmax));
      for(const g of groups) nouns.push(...NOUNS[Number(g.name.charAt(g.name.length-1))].values);
      doms.push(...DOMAINS.filter(e => e.freq >= dommin && e.freq <= dommax));
  
      console.log(`w:${www} p:${pronoun} dr:${domainRarity} r:${resultCount} ap:${adjVibe} av:${adjVariance} ng:${nouns.length}`)
  
      let i=0;
      let elm;
      const intervalId= setInterval(()=>{
        
        let r_www= www ? "www." : "";
        let r_pronoun= pronoun ? PRONOUNS[Math.floor(Math.random()*AMOUNTS[0])] : "";
        let r_adj= adjs[Math.floor(Math.random()*adjs.length)].word;
        let r_noun= nouns[Math.floor(Math.random()*nouns.length)];
        let r_dom= doms[Math.floor(Math.random()*doms.length)].domain;
  
        let result= `${r_www}${r_pronoun}${r_adj}${r_noun}.${r_dom}`;

        elm= RESULTS_TEMPLATE.content.cloneNode(true);
        elm.children[0].children[0].textContent= result;
        RESULTS_CONTAINER.append(elm);
  
        i++;
  
        if(i >= resultCount) clearInterval(intervalId);
      } , 16);

    }
  }

  function onSliderChanged(slider){
    slider.parentNode.children[2].innerHTML= slider.hasAttribute("dng-integer") ? Number(slider.value).toFixed(0) : Number(slider.value).toFixed(2);
  }

  function onActionPerformed(action){
    if(BUTTONS_TYPES.includes(action)) setAllGroups(BUTTONS_TYPES.indexOf(action));
  }

  function setAllGroups(mode){
    const noungroups= Array.from(document.getElementById("dng-noungroup-container").children).filter(e => e.tagName==="INPUT");
    for(const e of noungroups) e.checked= mode != 2 ? Boolean(mode) : Math.random() < .5;
  }

  function animateGroups(){
    const 
      groupTemplate= document.getElementById("dng-noungroup-template"),
      container= document.getElementById("dng-noungroup-container");

    let 
      category, 
      elm, 
      attr, 
      placeholderAmount= container.childElementCount;

    let i=0;
    const intervalId= setInterval(() => {

      category= NOUNS[i].category;
      attr= `dng-noungrp-${i}`;

      elm= groupTemplate.content.cloneNode(true);
      elm.children[0].setAttribute("id", attr);
      elm.children[0].setAttribute("name", attr);
      elm.children[1].setAttribute("for", attr);

      if(Math.random() < .5) elm.children[0].removeAttribute("checked");

      elm.children[1].textContent= category;
      
      if(i < placeholderAmount) container.replaceChild(elm, container.children[i*2]);
      else container.append(elm);

      i++;

      if(i>= NOUNS.length) {
        container.classList.remove("placeholder");
        clearInterval(intervalId);
      }

    }, 50);
  }

  function animateAmounts(){
    const 
      size= AMOUNTS_ELEMENTS.length,
      animationTime= 1.0,
      animationFPS= 30,
      factor= 1.0 / (animationTime * animationFPS),
      current= Array.from({length: size}, (v,k) => 0),
      step= Array.from({length: size}, (v,k) => AMOUNTS[k]*factor),
      showThreshold= AMOUNTS[4]*0.94;
    let 
      hidden= true,
      badge= document.getElementById("dng-tickbadge");

    for(let i=0; i < size; i++) AMOUNTS_ELEMENTS[i].classList= AMOUNTS_CLASSES[1];

    const intervalId= setInterval(() => {

      for(let i=0; i < size; i++) {
        current[i]+= step[i];
        AMOUNTS_ELEMENTS[i].textContent= Math.floor(current[i]);
      }

      if(hidden && current[4] >= showThreshold){
        badge.classList.remove("opacity-0");
        hidden= false;
      }

      if(current[4]>=AMOUNTS[4]){
        
        for(let i=0; i < size; i++) {
          AMOUNTS_ELEMENTS[i].textContent= Math.floor(AMOUNTS[i]);
          AMOUNTS_ELEMENTS[i].classList= AMOUNTS_CLASSES[2];
        }

        setTimeout(()=>{new bootstrap.Tooltip(badge);}, 500);
        clearInterval(intervalId);
      }

    }, Math.floor(1000/animationFPS));
  }

  function clamp(n,min,max) { return n<min?min:n>max?max:n };

  initialize();
};
