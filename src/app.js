/* eslint-disable */
import "bootstrap";
import "./styles.css";

/* 
 * All the word lists were generated by ChatGPT, as it's the only use that its acceptable to me: to ease database's tedious work
 * then I converted them to JSON format (I was getting weird results asking for JSON lists directly idk why)
 * I also wrote a Python script (included here if you wanna check) to sort JSON objects just to refresh my Python
 * 
 * 46 articles
 * 400 adjectives with a positiveness value
 * 625 nouns separated in 25 groups
 * 98 real domains with a frequency value
 * 
 * used inputs of type 'range' for first time in my life
 * 
*/

window.onload= function() {
  
  const 
    FILEPATH= "./src/data/%0.json",
    FILES= [
    { filename: "pronouns", parser: jsonParserPronouns },
    { filename: "adjectives", parser: jsonParserAdjectives },
    { filename: "nouns", parser: jsonParserNouns },
    { filename: "domains", parser: jsonParserDomains }
  ];

  const PRONOUNS= [], ADJECTIVES= [], NOUNS= [], DOMAINS= [];
  const AMOUNTS_ELEMENTS= document.getElementById("dng-amounts").children;
  const AMOUNTS_CLASSES= ["text-danger-emphasis", "text-warning-emphasis", "text-success-emphasis"];
  const AMOUNTS=[0,0,0,0,0];

  async function initialize(){

    for(let i=0; i < AMOUNTS_ELEMENTS.length; i++) AMOUNTS_ELEMENTS[i].classList= AMOUNTS_CLASSES[0];

    var json;
    for(const loader of FILES) {
      json= await loadJson(FILEPATH.replace("%0", loader.filename));
      loader.parser(json);
    }

    AMOUNTS[4]= AMOUNTS[0] * AMOUNTS[1] * AMOUNTS[2] * AMOUNTS[3];
    setTimeout(animateAmounts, 500);
  }

  async function loadJson(file) { return  (await fetch(file)).json(); }

  function jsonParserPronouns(json){ 
    AMOUNTS[0]= json.length;
    PRONOUNS.push(...json);
  }

  function jsonParserAdjectives(json){
    AMOUNTS[1]= json.length;
    ADJECTIVES.push(...json);
  }

  function jsonParserNouns(json){
    for(const g of json) AMOUNTS[2]+= g.values.length;
    NOUNS.push(...json);
  }

  function jsonParserDomains(json){
    AMOUNTS[3]+= json.length;
    DOMAINS.push(...json);
  }

  function animateAmounts(){
    const 
      size= AMOUNTS_ELEMENTS.length,
      animationTime= 1.0,
      animationFPS= 30,
      factor= 1.0 / (animationTime * animationFPS),
      current= Array.from({length: size}, (v,k) => 0),
      step= Array.from({length: size}, (v,k) => AMOUNTS[k]*factor),
      showThreshold= AMOUNTS[4]*0.94;
    let 
      hidden= true,
      badge= document.getElementById("dng-tickbadge");

    for(let i=0; i < size; i++) AMOUNTS_ELEMENTS[i].classList= AMOUNTS_CLASSES[1];

    const intervalId= setInterval(() => {

      for(let i=0; i < size; i++) {
        current[i]+= step[i];
        AMOUNTS_ELEMENTS[i].textContent= Math.floor(current[i]);
      }

      if(hidden && current[4] >= showThreshold){
        badge.classList.remove("opacity-0");
        hidden= false;
      }

      if(current[4]>=AMOUNTS[4]){
        
        for(let i=0; i < size; i++) {
          AMOUNTS_ELEMENTS[i].textContent= Math.floor(AMOUNTS[i]);
          AMOUNTS_ELEMENTS[i].classList= AMOUNTS_CLASSES[2];
        }

        new bootstrap.Tooltip(badge);
        
        clearInterval(intervalId);
      }

    }, Math.floor(1000/animationFPS));
  }

  initialize();
};
